package wang.jason.lib;

import com.google.common.collect.Iterables;
import com.squareup.javapoet.*;
import org.apache.commons.lang3.StringUtils;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.lang.model.element.Modifier;
import javax.lang.model.util.Elements;
import java.util.*;

import static java.lang.Boolean.TRUE;

public class GenerateCodeTool {

    private Elements elementUtils;
    private Messager messager;
    private Filer mFiler;
    public static final String STORE_SUFFIX = "DataStore";
    public static final String STORE_IMPL_SUFFIX = "DataStoreImpl";
    public static final String FACTORY_SUFFIX = "Factory";
    public static final String WARNING_TIPS = "DO NOT EDIT THIS FILE!!!" +
            " IT WAS GENERATED BY FactoryAnnotationProcessorTool.";
    public GenerateCodeTool(Elements elementUtils, Messager messager, Filer mFiler) {
        this.elementUtils = elementUtils;
        this.messager = messager;
        this.mFiler = mFiler;
    }

    public void generateCode(HashMap<String, FactoryAnnotationClass> factoryAnnotationClassHashMap){


        Map<String,Boolean> generatedInterfaceMap = new HashMap<>();
        for(FactoryAnnotationClass factoryAnnotationClass:factoryAnnotationClassHashMap.values()){
            Boolean generatedInterface = generatedInterfaceMap
                    .get(factoryAnnotationClass.getQualifiedSuperClassName());
            if(generatedInterface == null || !generatedInterface){
                generateStoreInterfaceCode(factoryAnnotationClass);
                generatedInterfaceMap.put(factoryAnnotationClass.getQualifiedSuperClassName(),TRUE);
            }
            generateStoreImplCode(factoryAnnotationClass);
            //generateFactoryCode(factoryAnnotationClass);

        }

    }

    private void generateStoreInterfaceCode(FactoryAnnotationClass factoryAnnotationClass){
        String className = factoryAnnotationClass.getSimpleTypeName();


        MethodSpec create = null;
        List<ParameterSpec> parameterSpecList = new ArrayList<>();
        for(int i =0;i<factoryAnnotationClass.getParametersQualifiedName().size();i++){

            String parameterQualifiedName = factoryAnnotationClass.getParametersQualifiedName().get(i);
            String parameterSimpleName = factoryAnnotationClass.getParametersSimpleName().get(i);

            parameterSimpleName = parameterSimpleName.substring(0,1).toLowerCase()
                        +parameterSimpleName.substring(1);
            parameterSpecList.add(ParameterSpec.builder(TypeName.get(elementUtils
                            .getTypeElement(parameterQualifiedName).asType())
                    ,parameterSimpleName)
                    .build());
        }
        Iterable<ParameterSpec> parameterSpecIterable = (Iterable<ParameterSpec>)parameterSpecList;
        /*if(parameterSpecList.size()>0){
            create = MethodSpec.methodBuilder("create"+className)
                    .returns(TypeName.get(elementUtils.getTypeElement(factoryAnnotationClass
                            .getQualifiedSuperClassName()).asType()))
                    .addModifiers(Modifier.PUBLIC,Modifier.ABSTRACT)
                    .addParameters(parameterSpecIterable)
                    .build();
        }else{
            create = MethodSpec.methodBuilder("create"+className)
                    .returns(TypeName.get(elementUtils.getTypeElement(factoryAnnotationClass
                            .getQualifiedSuperClassName()).asType()))
                    .addModifiers(Modifier.PUBLIC,Modifier.ABSTRACT)
                    //.addParameter(String.class,"route")
                    .build();
        }*/

        create = MethodSpec.methodBuilder("create"+className)
                .returns(TypeName.get(elementUtils.getTypeElement(factoryAnnotationClass
                        .getQualifiedSuperClassName()).asType()))
                .addModifiers(Modifier.PUBLIC,Modifier.ABSTRACT)
                //.addParameter(String.class,"route")
                .build();

        /*if(factoryAnnotationClass.getType() == null){


            create = MethodSpec.methodBuilder("create"+className)
                    .returns(TypeName.get(factoryAnnotationClass.getTypeMirror()))
                    .addModifiers(Modifier.PUBLIC,Modifier.ABSTRACT)
                    //.addParameter(String.class,"route")
                    .build();
        }else {

            create = MethodSpec.methodBuilder("create" + className)
                    .returns(factoryAnnotationClass.getType())
                    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                    //.addParameter(String.class, "route")
                    .build();
        }*/

        TypeSpec storeInterface = TypeSpec.interfaceBuilder(className
                +STORE_SUFFIX)
                .addJavadoc(WARNING_TIPS)
                .addModifiers(Modifier.PUBLIC)
                .addMethod(create)
                .build();


        JavaFile javaFile = JavaFile.builder(factoryAnnotationClass.getPackageName(), storeInterface)
                .build();
        try {
            javaFile.writeTo(mFiler);
        }catch (Exception e){
            //error(element," generate code error");
            e.printStackTrace();
            //throw new Exception("generate code error");
        }
    }


    private void generateStoreImplCode(FactoryAnnotationClass factoryAnnotationClass){
        String className = factoryAnnotationClass.getSimpleTypeName();



        MethodSpec create = null;
        MethodSpec nonParaCreate = null;
        ClassName productSuperClassName =
                ClassName.get(factoryAnnotationClass.getPackageName()
                        ,factoryAnnotationClass.getQualifiedSuperClassName());



        /*create = MethodSpec.methodBuilder("create"+className)
                .returns(productSuperClassName)
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)

                .addStatement("return new $T()",TypeName.get(factoryAnnotationClass.getTypeElement().asType()))

                .build();*/


        List<ParameterSpec> parameterSpecList = new ArrayList<>();
        List<String> parameterStringList = new ArrayList<>();
        for(int i =0;i<factoryAnnotationClass.getParametersQualifiedName().size();i++){

            String parameterQualifiedName = factoryAnnotationClass.getParametersQualifiedName().get(i);
            String parameterSimpleName = factoryAnnotationClass.getParametersSimpleName().get(i);

            parameterSimpleName = parameterSimpleName.substring(0,1).toLowerCase()
                    +parameterSimpleName.substring(1);

            parameterSpecList.add(ParameterSpec.builder(TypeName.get(elementUtils
                            .getTypeElement(parameterQualifiedName).asType())
                ,parameterSimpleName)
                    .build());
            parameterStringList.add(parameterSimpleName);
        }




        List<MethodSpec> methodSpecList = new ArrayList<>();
        if(parameterSpecList.size()>0){

            StringBuilder parameterStringBuilder =new StringBuilder();
            for(int i =0;i<parameterStringList.size();i++){
                if(i!=0){
                    parameterStringBuilder.append(",");
                }
                parameterStringBuilder.append(parameterStringList.get(i));

            }

            create = MethodSpec.methodBuilder("create"+className)
                    .returns(productSuperClassName)
                    //.addAnnotation(Override.class)
                    .addModifiers(Modifier.PUBLIC)
                    .addParameters(parameterSpecList)
                    .addStatement("return new $T("+parameterStringBuilder.toString()+")",TypeName.get(factoryAnnotationClass.getTypeElement().asType())
                            )

                    .build();
            nonParaCreate = MethodSpec.methodBuilder("create"+className)
                    .returns(productSuperClassName)
                    .addAnnotation(Override.class)
                    .addModifiers(Modifier.PUBLIC)

                    .addStatement("return null")

                    .build();
            methodSpecList.add(create);

            methodSpecList.add(nonParaCreate);

        }else{
            create = MethodSpec.methodBuilder("create"+className)
                    .returns(productSuperClassName)
                    .addAnnotation(Override.class)
                    .addModifiers(Modifier.PUBLIC)

                    .addStatement("return new $T()",TypeName.get(factoryAnnotationClass.getTypeElement().asType()))

                    .build();
            methodSpecList.add(create);
        }






        String superClassNameString = factoryAnnotationClass.getSimpleTypeName()+STORE_SUFFIX;

        ClassName superClassName = ClassName.get(factoryAnnotationClass.getPackageName()
                ,superClassNameString);



        className = className
                +STORE_SUFFIX+factoryAnnotationClass.getRoute();
        if(className.startsWith("I")){
            className = StringUtils.substring(className,1);
        }
        TypeSpec storeInterface = TypeSpec.classBuilder(className)
                .addJavadoc(WARNING_TIPS)
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(superClassName)
                .addMethods(methodSpecList)
                .build();


        JavaFile javaFile = JavaFile.builder(factoryAnnotationClass.getPackageName(), storeInterface)
                .build();
        try {
            javaFile.writeTo(mFiler);
        }catch (Exception e){
            //error(element," generate code error");
            e.printStackTrace();
            //throw new Exception("generate code error");
        }
    }

    private void generateFactoryCode(FactoryAnnotationClass factoryAnnotationClass){

        ClassName storeClassName = ClassName
                .get(factoryAnnotationClass.getPackageName(),
                        factoryAnnotationClass.getSimpleTypeName()+STORE_SUFFIX);
        ClassName storeImplClassName = ClassName
                .get(factoryAnnotationClass.getPackageName(),
                        factoryAnnotationClass.getSimpleTypeName()+STORE_IMPL_SUFFIX);
        MethodSpec create = MethodSpec.methodBuilder("create"+factoryAnnotationClass.getSimpleTypeName()
                    +STORE_SUFFIX)
                .returns(storeClassName)
                .addModifiers(Modifier.PUBLIC,Modifier.STATIC)
                .addStatement("return new $T()",storeImplClassName)
                .build();
        ClassName testClassName = ClassName.get("io.reactivex","Observable");
        MethodSpec test = MethodSpec.methodBuilder("create"
                +STORE_SUFFIX)
                .returns(testClassName)
                .addModifiers(Modifier.PUBLIC,Modifier.STATIC)
                .addStatement("return new $T()",testClassName)
                .build();
        TypeSpec factoryClass = TypeSpec.classBuilder(factoryAnnotationClass.getSimpleTypeName()+STORE_SUFFIX
                +FACTORY_SUFFIX)
                .addJavadoc(WARNING_TIPS)
                .addModifiers(Modifier.PUBLIC)

                .addMethod(create)
                //.addMethod(test)
                .build();
        JavaFile javaFile = JavaFile.builder(factoryAnnotationClass.getPackageName(), factoryClass)
                .build();
        try {
            javaFile.writeTo(mFiler);
        }catch (Exception e){
            //error(element," generate code error");
            e.printStackTrace();
            //throw new Exception("generate code error");
        }
    }
}
